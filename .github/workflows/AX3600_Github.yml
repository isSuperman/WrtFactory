#
# Copyright (c) 2021 isSuperman
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/isSuperman/WrtFactory
# Description: Build Wrt Firmware using GitHub Actions
#

name: AX3600 Github

on:
  repository_dispatch:
  workflow_dispatch:
  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: AX3600
  SPEND_TIME: spend_time_formate.sh
  COMMIT_INFO: commit_formate.sh
  ETA: ETA_formate.sh
  UPLOAD_RELEASE: true
  UPLOAD_FIRMWARE: true
  UP_COW: true
  UP_FIO: true
  UP_LIT: true

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:

    - name: Checkout
       uses: actions/checkout@main@v2
       with:
          repository: 'coolsnowwolf/lede'
          ref: master
          fetch-depth: 0

    - name: cache
       uses: klever1988/cachewrtbuild@main
       with:
          #是否一并缓存.ccache目录，如果你启用了ccache。这是唯一的常用参数，其他三个用于除错，一般不需要调整
          ccache: true

          #是否缓存工具链目录
          toolchain: true

          #是否跳过工具链编译
          skip: true

          #清空缓存
          clean: false

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf wget swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo apt install zip
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "START_DATE=$(date +%s)" >> $GITHUB_ENV
        
    - name: Prepare to Compile
      run: |
        dts=$((${{ env.START_DATE }} + 6600))
        dt_day=$(date -d @$dts '+%d')
        dt_hour=$(date -d @$dts '+%H')
        dt_time=$(date -d @$dts '+%H:%M')
        echo "time is ${dt_time}"
        curl -sL git.io/eta_formate_sh > $ETA
        chmod +x $ETA
        ./$ETA $dt_day $dt_hour > dta_desc.log
        echo "$(cat dta_desc.log) $dt_time" > dt_str.log
        echo "DT=$(cat dt_str.log)" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Generate commit info
      id: commitinfo
      run: |
        cd openwrt
        rm -rf bin/targets/*
        curl -sL git.io/commit_formate_sh > $COMMIT_INFO
        chmod +x $COMMIT_INFO
        ./$COMMIT_INFO immortalwrt lean-lede > com_info.log
        echo "DATE_INFO=$(sed -n '2p' com_info.log)" >> $GITHUB_ENV
        echo "RECENT_DATE=$(sed -n '1p' com_info.log)" >> $GITHUB_ENV

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        mv config/$CONFIG_FILE openwrt/.config
        cd openwrt
        sed -i '$a src-git helloworld https://github.com/fw876/helloworld.git' feeds.conf.default
        sed -i 's@.*CYXluq4wUazHjmCDBCqXF*@#&@g' package/lean/default-settings/files/zzz-default-settings
        sed -i 's/192.168.1.1/192.168.5.1/g' package/base-files/files/bin/config_generate

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download package
      id: package
      run: |
        cd openwrt
        rm -rf ./tmp ./package/feeds/luci/luci-app-nlbwmon ./package/lean/luci-app-wrtbwmon

        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        curl -sSX POST 'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' -H 'Content-Type: application/x-www-form-urlencoded' --data-binary $'parse_mode=MarkdownV2&chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&disable_web_page_preview=true&text=*Wrt Update Checker：*\n固件开始编译\.\.\.\n预计${{ env.DT }} 结束🧭' 
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "COME_DATE=$(date +"%m\-%d %H:%M")" >> $GITHUB_ENV
        echo "END_DATE=$(date +%s)"  >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
           
    - name: Cau Spend Time
      id: caculate
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt
        curl -sL git.io/spend_time_formate_sh > $SPEND_TIME
        chmod +x $SPEND_TIME
        ./$SPEND_TIME ${{ env.START_DATE }} ${{ env.END_DATE }} 2>&1 | tee cau_time.log
        echo "SPEND_TIME=$(cat cau_time.log)" >> $GITHUB_ENV
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: firmware_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: Upload to Netdisk
      id: upload
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        zip firmware-xiaomi-ax3600.zip *
        curl -fsSL git.io/file-transfer | sh
        if test ${{ env.UP_COW }} = 'true';then
          ./transfer cow --block 2621440 -s -p 64 --no-progress firmware-xiaomi-ax3600.zip 2>&1 | tee cowtransfer.log
          echo "$(cat cowtransfer.log | grep https | cut -f3 -d" ")" > cow.log
          sed -i 's/\./\\\./g' cow.log
          echo "[Cowtransfer]($(cat cow.log))" >> down_md.log
        fi
        
        if test ${{ env.UP_FIO }} = 'true';then
          ./transfer fio --no-progress firmware-xiaomi-ax3600.zip 2>&1 | tee fileio.log
          echo "$(cat fileio.log | grep https | cut -f3 -d" ")" > fio.log
          sed -i 's/\./\\\./g' fio.log
          echo "[Fileio]($(cat fio.log))" >> down_md.log
        fi
        
        if test ${{ env.UP_LIT }} = 'true';then
          ./transfer lit --no-progress firmware-xiaomi-ax3600.zip 2>&1 | tee litterbox.log
          echo "$(cat litterbox.log | grep https | cut -f3 -d" ")" > lit.log
          sed -i 's/\./\\\./g' lit.log
          echo "[LitterBox]($(cat lit.log))" >> down_md.log
        fi
        rm -rf firmware-xiaomi-ax3600.zip transfer
        mv down_md.log $GITHUB_WORKSPACE
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        cd openwrt
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.log
        echo "### What's New v${{ env.RECENT_DATE }}" >> release.log
        echo "$(sed -n '2p' com_info.log)" > info.log
        sed -i 's/\\n/\n/g' info.log
        sed -i 's/\\//g' info.log
        sed -i 's/from /from https:\/\/github.com\//g' info.log
        sed -i 's/\- /#### /g' info.log
        cat info.log >> release.log
        echo "::set-output name=status::success"
        cd ..
        cd ${{ env.FIRMWARE }}
        rm -rf *.log
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: openwrt/release.log
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Orgnize down list
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        if test -f down_md.log; then
          sed -i ':a;N;$!ba;s/\n/  /g' down_md.log
          sed -i 's/_/-/g' down_md.log
          while read line || [ -n "$line" ]; do
            echo "\n${line}" >> down_list.log
          done < "./down_md.log"
        fi

        if test -f down_list.log;then
          sed -i 's/\-/\\-/g' down_list.log
          sed -i 's/\./\\./g' down_list.log
          sed -i 's/\_/\\_/g' down_list.log
          sed -i ':a;N;$!ba;s/\n//g' down_list.log
          echo "DOWN_LIST=$(cat down_list.log)" >>$GITHUB_ENV
        else
          echo "\nthere is no firmware generated" >> down_list.log
          echo "DOWN_LIST=$(cat down_list.log)" >>$GITHUB_ENV
        fi      
      
    - name: Push Notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        curl -sSX POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/x-www-form-urlencoded" --data-binary $'parse_mode=MarkdownV2&chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&disable_web_page_preview=true&text=*Wrt Update Checker：*\n\n_Device Type: AX3600_\n_Date: ${{ env.COME_DATE }}_\n_Result: success 🎉_\n\n*What\'s New v${{ env.RECENT_DATE }}*${{ env.DATE_INFO }}\n\n*Artifacts*${{ env.DOWN_LIST }}  [Release](https://github\.com/isSuperman/WrtFactory/releases)\n\n_Github Spend Time: ${{ env.SPEND_TIME }}_'        
